/* HEADER:
 * This is an experimental compute shader that draws a red line between two points.
 * It is called by sc_drawLine.
 */

#pragma kernel CSMain

//This Texture will contain the result
RWTexture2D<float4> Result;


//Main CS Kernel
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float2 a = float2(50, 270);		// First point (A)
	float2 b = float2(360, 420);	// Second point (B)

	int size = 20;					// Width of the line

	float2 p = id.xy;				// point (P) in the resulting texture we are currently looking at. we test know if this point intersects with the line and therefore has to be painted red
	float2 ap = p - a;				// Vector from A to P
	float2 bp = p - b;				// Vector from B to P

	bool draw = length(ap) <= size/2 || length(bp) <= size/2;		// Check if point P is close enough to A or B to be painted red
	
	if (!draw) {													// if not check wether it is between A and B
		float2 ab = b - a;											// Vector from A to B
		float2 o = normalize(float2(-ab.y, ab.x));					// Orthogonal vector to AB (normalized)


		float d_o = abs(dot(o, ap));								// Distance of P along the orthogonal Vector
		float d_ab = dot(normalize(ab), ap);						// Distance of P along Vector AB

		draw = d_o <= size / 2 && d_ab <= length(ab) && d_ab >= 0;	// Check if P is between A and B
	}

	if (draw) {														// Paint P red if necessary
		Result[id.xy] = float4(1,0,0,1);
	}
}
