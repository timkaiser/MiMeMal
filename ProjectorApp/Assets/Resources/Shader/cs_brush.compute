/*HEADER:
 * This compute shader does the actual drawing work for the brush tool. It takes as input three textures, one color, 
 * two mouse positions, the starting point for the drawing, the brush size and the id of the component it is drawing on. It draws a line between both mouse positions
 */

#pragma kernel brush

RWTexture2D<float4> Texture;		// INPUT: Texture to draw on;  OUTPUT: Input + Drawing 

Texture2D<float2> UV;				// UV Imageof the scene
float corner_x, corner_y;			// Bottom left corner of the drawing area

Texture2D<float> Component_Mask;	// Mask that contains information about which part of the object belongs to which component
float component_id;					// ID of the component the shader is currently drawing on

float red, green, blue;				// Draw color

float x_old, y_old;					// Old mouse position
float x_new, y_new;					// New mouse position

float size;							// Brush size


/* This methode checks wether or not a point P is in the line between both mouse positions and therefore has to be drawn
 * INPUT:  float2 p:		point to be checked
 * OUTPUT: bool:			wether or not the point has to be draw
 */
bool isInLine(float2 p) {
	float2 a = float2(x_old, y_old);	// Define point A (for some reason the y coords have to be switched, probably not the best solution but it works)
	float2 b = float2(x_new, y_new);	// Define point B

	float2 ap = p - a;					// Define vector A to P
	float2 bp = p - b;					// Define vector B to P

	bool draw = length(ap) <= size / 2 || length(bp) <= size / 2;		// Check wether or not point P is close enough to A or B to be drawn

	if (!draw) {														// If not check wether or not P is between A and B
		float2 ab = b - a;												// Define vector A to B
		float2 o = normalize(float2(-ab.y, ab.x));						// Define vector orthogonal to AB

		float d_o = abs(dot(o, ap));									// Calculate distance between A and P alongside the orthogonal vector
		float d_ab = dot(normalize(ab), ap);							// Calculate distance between A and P alongside vector AB

		draw = d_o <= size / 2 && d_ab <= length(ab) && d_ab >= 0;		// Check wether P is between A and B
	}

	return draw;
}

/* This is the main part of the shader
 * INPUT: uint3 id: coordinate on the UV texture exerpt
 */
[numthreads(4,4,1)]
void brush (uint3 id : SV_DispatchThreadID)
{
	// Calculate screen position
	uint2 pos = id.xy + uint2(corner_x, corner_y);

	// If the pixel at position id.xy is not in the line between A and B then cancel
	if (!isInLine(float2(pos.x, pos.y))) { return; }

	// Get size of the component mask
	uint2 component_mask_size;
	Component_Mask.GetDimensions(component_mask_size.x, component_mask_size.y);

	// If pixel is not in current component then cancel
	if (abs(component_id - Component_Mask[component_mask_size*UV[pos]]) > 0.01f) { return; }

	// Get size of the texture
	uint width, height;
	Texture.GetDimensions(width, height);

	// Calculate position on texture
	int2 px = int2(UV[pos].x*width, (UV[pos].y)*height);

	// Set pixel to color
	Texture[px] = float4(red, green, blue, 1);
	
}
